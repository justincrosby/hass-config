volume_up:
  alias: Volume Up
  sequence:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.denon_avr_x1300w
        volume_level: '{{ state_attr("media_player.denon_avr_x1300w", "volume_level") + 0.05 }}'
volume_down:
  alias: Volume Down
  sequence:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.denon_avr_x1300w
        volume_level: '{{ state_attr("media_player.denon_avr_x1300w", "volume_level") - 0.05 }}'
start_playlist:
  alias: Start a spotify playlist
  fields:
    device_name:
      description: 'The friendly name of the media player to cast to.'
      example: 'Home Audio'
    entity_id:
      description: 'The media player to cast to.'
      example: 'media_player.home_audio'
    playlist_uri:
      description: 'The Spotify playlist URI to play.'
      example: 'spotify:playlist:*'
  sequence:
    - service: media_player.volume_mute
      data_template:
        entity_id: '{{ entity_id }}'
        is_volume_muted: true
    - service: spotcast.start
      data_template:
        device_name: '{{ device_name }}'
        uri: 'spotify:track:5V3b2UB9tCAHuqXj2b2EP7'  # track with 1 second of silence
    - service: media_player.volume_mute
      data_template:
        entity_id: '{{ entity_id }}'
        is_volume_muted: false
    - service: media_player.volume_set  #setting the volume is optional ofcourse
      data_template:
        entity_id: '{{ entity_id }}'
        volume_level: 0
    - service: spotcast.start
      data_template:
        device_name: '{{ device_name }}'
        uri: '{{ playlist_uri }}'
        random_song: true
    - wait_template: '{{ is_state("sensor.media_status", "playing") }}'
      timeout: '00:01:00'
    - service: shell_command.shuffle_spotify
    - service: python_script.volume_fade
      data:
        step_size: 5
        end_volume: 50
play_all_music:
  alias: Play All Music Playlist
  sequence:
    - service: script.turn_on
      entity_id: script.start_playlist
      data_template:
        variables:
          device_name: '{{ states("input_select.media_output_select") }}'
          entity_id: '{{ states("sensor.media_output") }}'
          playlist_uri: !secret all_music_playlist_uri
play_chill_music:
  alias: Play Chill Music Playlist
  sequence:
    - service: script.turn_on
      entity_id: script.start_playlist
      data_template:
        variables:
          device_name: '{{ states("input_select.media_output_select") }}'
          entity_id: '{{ states("sensor.media_output") }}'
          playlist_uri: !secret chill_music_playlist_uri
play_all_music_conditional:
  alias: Play All Music Playlist Before 11pm
  sequence:
    - condition: and
      conditions:
        - condition: time
          before: "23:00:00"
        - condition: time
          after: "09:00:00"
    - service: script.turn_on
      entity_id: script.play_all_music
change_media_output:
  alias: Change the media output
  sequence:
    - service: spotcast.start
      data_template:
        entity_id: '{{ states("sensor.media_output") }}'
fade_in_music:
  alias: Wrapper for volume increase
  sequence:
    - wait_template: '{{ is_state("sensor.media_status", "playing") }}'
      timeout: '00:10:00'
    - service: script.turn_on
      entity_id: script.set_default_audio_levels
    - delay:
        seconds: 2
    - service: media_player.volume_set
      data_template:
        entity_id: '{{ states("sensor.media_output") }}'
        volume_level: '{{ start_volume }}'
    - delay:
        seconds: 45
    - service: python_script.volume_fade
      data_template:
        step_size: '{{ step_size }}'
        end_volume: '{{ stop_volume }}'
    - wait_template: >
        {% if (step_size|float > 0) %}
          {{ states("sensor.chromecast_volume")|float >= stop_volume|float }}
        {% else %}
          {{ states("sensor.chromecast_volume")|float <= stop_volume|float }}
        {% endif %}
      timeout: '00:05:00'
    - delay:
        seconds: 5
    # automations can be restored now
    - service: input_boolean.turn_on
      entity_id: input_boolean.enable_music_automations
shower_time:
  alias: Increase the Volume During Shower
  sequence:
    - delay:
        seconds: 2
    - service: input_number.set_value
      data:
        entity_id: input_number.bathroom_audio_volume
        value: 0.5
    - delay:
        minutes: 15
    - service: input_number.set_value
      data:
        entity_id: input_number.bathroom_audio_volume
        value: !secret default_bathroom_audio_volume
morning_music:
  alias: Start music quietly in the morning
  sequence:
    - service: input_select.select_option
      data:
        entity_id: input_select.media_output_select
        option: 'Bedroom Audio'
    - delay:
        milliseconds: 500
    - service: input_select.select_option
      data_template:
        entity_id: input_select.media_select
        option: 'Cast Audio'
    - wait_template: '{{ is_state("script.media_input_select", "off") }}'
      timeout: '00:1:00'
    # disable music automations so they don't mess with audio settings
    - service: input_boolean.turn_off
      entity_id: input_boolean.enable_music_automations
    - delay:
        seconds: 1
    - service: script.turn_on
      entity_id: script.play_chill_music
    - service: script.turn_on
      entity_id: script.fade_in_music
      data:
        variables:
          step_size: 1
          start_volume: 0
          stop_volume: 35
set_default_audio_levels:
  alias: Sets a good audio level throughout the house
  sequence:
    - service: script.turn_on
      entity_id: script.set_default_bedroom_volume
    - service: script.turn_on
      entity_id: script.set_default_master_suite_volume
    - service: script.turn_on
      entity_id: script.set_default_home_audio_volume
    - service: script.turn_on
      entity_id: script.set_default_receiver_volume
set_default_bedroom_volume:
  alias: Sets the default volume for bedroom audio when selected
  sequence:
    - condition: state
      entity_id: input_select.media_select
      state: 'Cast Audio'
    - condition: state
      entity_id: input_select.media_output_select
      state: 'Bedroom Audio'
    - wait_template: '{{ is_state("sensor.media_status", "playing") }}'
      timeout: '00:1:00'
    - service: input_number.set_value
      data:
        entity_id: input_number.bedroom_audio_volume
        value: !secret default_bedroom_audio_volume
set_default_master_suite_volume:
  alias: Sets the default volume for master suite audio when selected
  sequence:
    - condition: state
      entity_id: input_select.media_select
      state: 'Cast Audio'
    - condition: state
      entity_id: input_select.media_output_select
      state: 'Master Suite Audio'
    - wait_template: '{{ is_state("sensor.media_status", "playing") }}'
      timeout: '00:1:00'
    - service: input_number.set_value
      data:
        entity_id: input_number.bedroom_audio_volume
        value: !secret default_bedroom_audio_volume
    - delay:
        milliseconds: 500
    - service: input_number.set_value
      data:
        entity_id: input_number.bathroom_audio_volume
        value: !secret default_bathroom_audio_volume
set_default_home_audio_volume:
  alias: Sets the default volume for home audio when selected
  sequence:
    - condition: state
      entity_id: input_select.media_select
      state: 'Cast Audio'
    - condition: state
      entity_id: input_select.media_output_select
      state: 'Home Audio'
    - service: media_player.volume_set
      data:
        entity_id: media_player.denon_avr_x1300w
        volume_level: !secret default_receiver_cast_volume
    - wait_template: '{{ is_state("sensor.media_status", "playing") }}'
      timeout: '00:1:00'
    - service: input_number.set_value
      data:
        entity_id: input_number.living_room_audio_volume
        value: !secret default_living_room_audio_volume
    - delay:
        milliseconds: 500
    - service: input_number.set_value
      data:
        entity_id: input_number.bedroom_audio_volume
        value: !secret default_bedroom_audio_volume
    - delay:
        milliseconds: 500
    - service: input_number.set_value
      data:
        entity_id: input_number.bathroom_audio_volume
        value: !secret default_bathroom_audio_volume
    - delay:
        milliseconds: 500
    - service: input_number.set_value
      data:
        entity_id: input_number.main_bathroom_audio_volume
        value: !secret default_bathroom_audio_volume
set_default_receiver_volume:
  alias: Sets the default volume for the home theatre
  sequence:
    - condition: template
      value_template: >
        {% if is_state('input_select.media_select', 'Cast Audio') or is_state('input_select.media_select', 'Shutdown') %}
          false
        {% else %}
          true
        {% endif %}
    - service: media_player.volume_set
      data:
        entity_id: media_player.denon_avr_x1300w
        volume_level: !secret default_receiver_volume
switch_to_chromecast:
  alias: Switch to Chromecast
  sequence:
    - condition: template
      value_template: >
        {% if is_state('input_select.media_select', 'Cast Audio') or is_state('input_select.media_select', 'Shutdown') %}
          false
        {% else %}
          true
        {% endif %}
    - service: media_player.turn_off
      data_template:
        entity_id: '{{ states("sensor.media_output") }}'
    - service: media_player.turn_on
      entity_id: media_player.vizio_smartcast
    - service: media_player.turn_on
      entity_id: media_player.denon_avr_x1300w
    - wait_template: '{{ is_state("media_player.denon_avr_x1300w", "on") }}'
      timeout: '00:1:00'
    - service: media_player.select_source
      data_template:
        entity_id: media_player.denon_avr_x1300w
        source: >
          {% if is_state('input_select.media_select', 'Cast Video') %}
            TV Audio
          {% elif is_state('input_select.media_select', 'PS3') %}
            PS3
          {% elif is_state('input_select.media_select', 'Record Player') %}
            RecordPlayer
          {% elif is_state('input_select.media_select', 'Steam') %}
            NUC
          {% elif is_state('input_select.media_select', 'Switch') %}
            Switch
          {% elif is_state('input_select.media_select', 'WiiU') %}
            WiiU
          {% else %}
            TV Audio
          {% endif %}
    - delay:
        milliseconds: 500
    - service: script.turn_on
      entity_id: script.set_default_audio_levels
    - wait_template: '{{ is_state("media_player.vizio_smartcast", "on") }}'
      timeout: '00:1:00'
    - condition: template
      value_template: >
        {% if is_state('input_select.media_select', 'Cast Video') %}
          {{ state_attr("media_player.vizio_smartcast", "source") != "SMARTCAST" }}
        {% else %}
          {{ state_attr("media_player.vizio_smartcast", "source") != "HDMI-1" }}
        {% endif %}
    - service: media_player.select_source
      data_template:
        entity_id: media_player.vizio_smartcast
        source: >
          {% if is_state('input_select.media_select', 'Cast Video') %}
            CAST
          {% else %}
            HDMI-1
          {% endif %}
    - wait_template: '{{ is_state("sensor.media_source", states("input_select.media_select")) }}'
      timeout: '00:1:00'
switch_to_audio:
  alias: Switch to Audio
  sequence:
    - condition: state
      entity_id: input_select.media_select
      state: 'Cast Audio'
    - service: media_player.turn_off
      entity_id: media_player.vizio_smartcast
    - service: script.turn_on
      entity_id: script.switch_to_audio_receiver
    - wait_template: '{{ is_state("script.switch_to_audio_receiver", "off") }}'
      timeout: '00:01:00'
    - service: script.turn_on
      entity_id: script.set_default_audio_levels
    - wait_template: '{{ is_state("sensor.media_source", states("input_select.media_select")) }}'
      timeout: '00:01:00'
switch_to_audio_receiver:
  alias: Switch to Audio Receiver
  sequence:
    - condition: template
      value_template: '{{ not is_state("input_select.media_output_select", "Bedroom Audio") and not is_state("input_select.media_output_select", "Master Suite Audio") }}'
    - service: media_player.turn_on
      entity_id: media_player.denon_avr_x1300w
    - wait_template: '{{ is_state("media_player.denon_avr_x1300w", "on") }}'
      timeout: '00:01:00'
    - service: shell_command.switch_to_audio
    - delay:
        milliseconds: 500
media_shutdown:
  alias: Shutdown all media
  sequence:
    - condition: state
      entity_id: input_select.media_select
      state: 'Shutdown'
    - service: media_player.turn_off
      entity_id: media_player.vizio_smartcast
    - service: media_player.turn_off
      entity_id: media_player.denon_avr_x1300w
    - service: media_player.turn_off
      data_template:
        entity_id: '{{ states("sensor.media_output") }}'
    - service: media_player.media_stop
      entity_id: media_player.mpd
    - service: media_player.turn_off
      entity_id: media_player.vizio_smartcast
    - wait_template: '{{ is_state("sensor.media_source", states("input_select.media_select")) }}'
      timeout: '00:1:00'
media_input_select:
  alias: Change the home theatre settings depending on the input selection
  sequence:
    - service: input_boolean.turn_off
      entity_id: input_boolean.enable_music_automations
    - delay:
        milliseconds: 500
    - service: script.turn_on
      entity_id: script.media_shutdown
    - service: script.turn_on
      entity_id: script.switch_to_chromecast
    - service: script.turn_on
      entity_id: script.switch_to_audio
    - wait_template: '{{ is_state("script.media_shutdown", "off") }}'
      timeout: '00:1:00'
    - wait_template: '{{ is_state("script.switch_to_chromecast", "off") }}'
      timeout: '00:1:00'
    - wait_template: '{{ is_state("script.switch_to_audio", "off") }}'
      timeout: '00:1:00'
    - delay:
        seconds: 1
    - service: input_boolean.turn_on
      entity_id: input_boolean.enable_music_automations
change_tv_input_conditional:
  alias: Changes the TV input if it is needed for the current input setting
  sequence:
    - condition: template
      value_template: >
        {% if is_state('input_select.media_select', 'Cast Audio')  %}
          false
        {% else %}
          true
        {% endif %}
    - condition: template
      value_template: >
        {% if is_state('input_select.media_select', 'Cast Video') %}
          {{ state_attr("media_player.vizio_smartcast", "source") != "SMARTCAST" }}
        {% else %}
          {{ state_attr("media_player.vizio_smartcast", "source") != "HDMI-1" }}
        {% endif %}
    - wait_template: '{{ is_state("media_player.vizio_smartcast", "on") }}'
      timeout: '00:1:00'
    - service: media_player.select_source
      data_template:
        entity_id: media_player.vizio_smartcast
        source: >
          {% if is_state('input_select.media_select', 'Cast Video') %}
            CAST
          {% else %}
            HDMI-1
          {% endif %}
update_media_select_source:
  alias: When the receiver source is changed manually, update the input select
  sequence:
    - service: automation.turn_off
      entity_id: automation.media_input_select_changed
    - delay:
        seconds: 1
    - service: input_select.select_option
      data_template:
        entity_id: input_select.media_select
        option: '{{ states("sensor.media_source") }}'
    - service: automation.turn_on
      entity_id: automation.media_input_select_changed
receiver_volume_changed:
  alias: Change the receiver volume based on the slider
  sequence:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.denon_avr_x1300w
        volume_level: '{{ states("input_number.receiver_audio_volume")|float / 100 }}'
update_receiver_volume_slider:
  alias: When the volume is changed manually, update the receiver volume
  sequence:
    - service: automation.turn_off
      entity_id: automation.receiver_volume_slider_moved
    - delay:
        seconds: 1
    - service: input_number.set_value
      data_template:
        entity_id: input_number.receiver_audio_volume
        value: '{{ states("sensor.receiver_volume")|int }}'
    - service: automation.turn_on
      entity_id: automation.receiver_volume_slider_moved
chromecast_volume_changed:
  alias: Change the chromecast volume based on the slider
  sequence:
    - service: media_player.volume_set
      data_template:
        entity_id: '{{ states("sensor.media_output") }}'
        volume_level: '{{ states("input_number.chromecast_audio_volume")|float / 100 }}'
update_chromecast_volume_slider:
  alias: When the volume is changed manually, update the chromecast volume
  sequence:
    - service: automation.turn_off
      entity_id: automation.chromecast_volume_slider_moved
    - delay:
        seconds: 1
    - service: input_number.set_value
      data_template:
        entity_id: input_number.chromecast_audio_volume
        value: '{{ states("sensor.chromecast_volume")|int }}'
    - service: automation.turn_on
      entity_id: automation.chromecast_volume_slider_moved